/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package cn.edu.neu.enzymefinder;

import java.awt.Color;
import java.awt.Image;
import java.awt.Toolkit;
import java.io.*;
import java.util.List;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.*;
import javax.swing.text.BadLocationException;
import javax.swing.text.DefaultHighlighter;

/**
 *
 * @author gibeon
 */
public class EnzymeFinderWindow extends javax.swing.JFrame {
    File positiveDirectory = null;
    File negativeDirectory = null;
    File patternFile = null;
    FindingThread findingThread = null;
    LocatingThread locatingThread = null;
    EnzymeFinder finder = new EnzymeFinder();
    int positiveCount = 0;
    int negativeCount = 0;
    /**
     * Creates new form EnzymeFinderWindow
     */
    public EnzymeFinderWindow() {
        initComponents();
        Toolkit kit=Toolkit.getDefaultToolkit();
        Image img=kit.getImage(getClass().getResource("/cn/edu/neu/enzymefinder/EnzymeFinder.png"));
        setIconImage(img);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        finderFileChooser = new javax.swing.JFileChooser();
        findingDialog = new javax.swing.JDialog();
        findingProgressBar = new javax.swing.JProgressBar();
        progressLabel = new javax.swing.JLabel();
        logLabel = new javax.swing.JLabel();
        logScrollPane = new javax.swing.JScrollPane();
        logTextArea = new javax.swing.JTextArea();
        jScrollPane2 = new javax.swing.JScrollPane();
        summaryTextArea = new javax.swing.JTextArea();
        summaryLabel = new javax.swing.JLabel();
        locatingDialog = new javax.swing.JDialog();
        okLocatingButton = new javax.swing.JButton();
        cancelLocatingButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        baseTextArea = new javax.swing.JTextArea();
        locatingTextField = new javax.swing.JTextField();
        locatingLabel = new javax.swing.JLabel();
        filler1 = new javax.swing.Box.Filler(new java.awt.Dimension(0, 0), new java.awt.Dimension(0, 0), new java.awt.Dimension(0, 32767));
        sequenceDialog = new javax.swing.JDialog();
        sequenceSplitPane = new javax.swing.JSplitPane();
        pairScrollPane = new javax.swing.JScrollPane();
        pairTextPane = new javax.swing.JTextPane();
        sequenceScrollPane = new javax.swing.JScrollPane();
        sequenceTextPane = new javax.swing.JTextPane();
        finderPanel = new javax.swing.JPanel();
        positiveButton = new javax.swing.JButton();
        negativeButton = new javax.swing.JButton();
        patternButton = new javax.swing.JButton();
        findButton = new javax.swing.JButton();
        positiveDirectoryLabel = new javax.swing.JLabel();
        negativeDirectoryLabel = new javax.swing.JLabel();
        patternFileLabel = new javax.swing.JLabel();
        positiveNoiseSpinner = new javax.swing.JSpinner();
        negativeNoiseSpinner = new javax.swing.JSpinner();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        homepageLabel = new javax.swing.JLabel();
        gangwuLabel = new javax.swing.JLabel();
        kaichenLabel = new javax.swing.JLabel();
        locatingButton = new javax.swing.JButton();
        filterCheckBox = new javax.swing.JCheckBox();
        copyrightLabel = new javax.swing.JLabel();
        combinationLabel = new javax.swing.JLabel();
        combinationSpinner = new javax.swing.JSpinner();

        findingDialog.setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        findingDialog.setTitle("Finding");
        findingDialog.setBounds(new java.awt.Rectangle(0, 0, 500, 400));
        findingDialog.setModal(true);
        findingDialog.setResizable(false);
        findingDialog.addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                findingDialogWindowClosing(evt);
            }
        });

        progressLabel.setText("Finding Progress:");

        logLabel.setText("Information Log:");

        logTextArea.setColumns(1);
        logTextArea.setEditable(false);
        logTextArea.setRows(5);
        logTextArea.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                logTextAreaMouseClicked(evt);
            }
        });
        logScrollPane.setViewportView(logTextArea);

        summaryTextArea.setColumns(20);
        summaryTextArea.setRows(2);
        jScrollPane2.setViewportView(summaryTextArea);

        summaryLabel.setText("Summary:");

        javax.swing.GroupLayout findingDialogLayout = new javax.swing.GroupLayout(findingDialog.getContentPane());
        findingDialog.getContentPane().setLayout(findingDialogLayout);
        findingDialogLayout.setHorizontalGroup(
            findingDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(findingDialogLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(findingDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(logScrollPane, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(findingProgressBar, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 424, Short.MAX_VALUE)
                    .addGroup(findingDialogLayout.createSequentialGroup()
                        .addGroup(findingDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(progressLabel)
                            .addComponent(logLabel)
                            .addComponent(summaryLabel))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        findingDialogLayout.setVerticalGroup(
            findingDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(findingDialogLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(progressLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(findingProgressBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(logLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(logScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 205, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(summaryLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 52, Short.MAX_VALUE)
                .addContainerGap())
        );

        locatingDialog.setTitle("Locate a sub sequence");
        locatingDialog.setBounds(new java.awt.Rectangle(0, 0, 400, 300));
        locatingDialog.setModal(true);
        locatingDialog.setResizable(false);

        okLocatingButton.setText("OK");
        okLocatingButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                okLocatingButtonActionPerformed(evt);
            }
        });

        cancelLocatingButton.setText("Cancel");
        cancelLocatingButton.setDefaultCapable(false);
        cancelLocatingButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelLocatingButtonActionPerformed(evt);
            }
        });

        baseTextArea.setColumns(20);
        baseTextArea.setEditable(false);
        baseTextArea.setFont(new java.awt.Font("Courier New", 0, 12)); // NOI18N
        baseTextArea.setRows(5);
        baseTextArea.setText("A - Adenine\nT - Thymine\nC - Cytosine\nG - Guanine\nR - A, G (Purine)\nY - C, T (Pyrimidine)\nW - A, T\nS - G, C\nM - A, C\nK - G, T\nH - A, T, C\nB - G, C, T\nV - G, A, C\nD - G, A, T");
        baseTextArea.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        jScrollPane1.setViewportView(baseTextArea);

        locatingLabel.setText("Locate Sequence:");

        javax.swing.GroupLayout locatingDialogLayout = new javax.swing.GroupLayout(locatingDialog.getContentPane());
        locatingDialog.getContentPane().setLayout(locatingDialogLayout);
        locatingDialogLayout.setHorizontalGroup(
            locatingDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1)
            .addGroup(locatingDialogLayout.createSequentialGroup()
                .addGap(82, 82, 82)
                .addComponent(filler1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(318, Short.MAX_VALUE))
            .addGroup(locatingDialogLayout.createSequentialGroup()
                .addComponent(locatingLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(locatingTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(okLocatingButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cancelLocatingButton))
        );
        locatingDialogLayout.setVerticalGroup(
            locatingDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, locatingDialogLayout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 209, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(27, 27, 27)
                .addGroup(locatingDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(locatingTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(okLocatingButton)
                    .addComponent(cancelLocatingButton)
                    .addComponent(locatingLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 29, Short.MAX_VALUE)
                .addComponent(filler1, javax.swing.GroupLayout.PREFERRED_SIZE, 12, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        sequenceDialog.setBounds(new java.awt.Rectangle(0, 0, 700, 500));
        sequenceDialog.setModal(true);

        sequenceSplitPane.setDividerLocation(347);

        pairTextPane.setEditable(false);
        pairScrollPane.setViewportView(pairTextPane);

        sequenceSplitPane.setRightComponent(pairScrollPane);

        sequenceTextPane.setEditable(false);
        sequenceScrollPane.setViewportView(sequenceTextPane);

        sequenceSplitPane.setLeftComponent(sequenceScrollPane);

        javax.swing.GroupLayout sequenceDialogLayout = new javax.swing.GroupLayout(sequenceDialog.getContentPane());
        sequenceDialog.getContentPane().setLayout(sequenceDialogLayout);
        sequenceDialogLayout.setHorizontalGroup(
            sequenceDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(sequenceSplitPane, javax.swing.GroupLayout.DEFAULT_SIZE, 706, Short.MAX_VALUE)
        );
        sequenceDialogLayout.setVerticalGroup(
            sequenceDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(sequenceSplitPane, javax.swing.GroupLayout.DEFAULT_SIZE, 382, Short.MAX_VALUE)
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Enzyme Finder");
        setBounds(new java.awt.Rectangle(0, 0, 726, 329));
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setName("finderFrame");

        positiveButton.setText("Set Positive Directory");
        positiveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                positiveButtonActionPerformed(evt);
            }
        });

        negativeButton.setText("Set Negative Directory");
        negativeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                negativeButtonActionPerformed(evt);
            }
        });

        patternButton.setText("Load Pattern File");
        patternButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                patternButtonActionPerformed(evt);
            }
        });

        findButton.setText("Find Now!");
        findButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                findButtonActionPerformed(evt);
            }
        });

        positiveNoiseSpinner.setModel(new javax.swing.SpinnerNumberModel(Integer.valueOf(0), Integer.valueOf(0), null, Integer.valueOf(1)));

        negativeNoiseSpinner.setModel(new javax.swing.SpinnerNumberModel(Integer.valueOf(0), Integer.valueOf(0), null, Integer.valueOf(1)));

        jLabel1.setText("Max # appeared in Negatives");

        jLabel2.setText("Min # not appeared in Positives");

        jLabel3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/cn/edu/neu/enzymefinder/EnzymeFinder.png"))); // NOI18N

        homepageLabel.setText("Enzyme Finder 6.0 (for Type I RM), Copyright 2012-2013");
        homepageLabel.setToolTipText("https://sourceforge.net/projects/enzymefinder/");
        homepageLabel.addMouseListener(new URLLabelMouseHandler(homepageLabel, null));

        gangwuLabel.setText("Gang WU, Northeastern University, China.");
        gangwuLabel.setToolTipText("http://faculty.neu.edu.cn/ise/wugang/");
        gangwuLabel.addMouseListener(new URLLabelMouseHandler(gangwuLabel, null));

        kaichenLabel.setText("Kai CHEN, The University of Edinburgh, UK.");
        kaichenLabel.setToolTipText("mailto:ccdatabank@hotmail.com");
        kaichenLabel.addMouseListener(new URLLabelMouseHandler(kaichenLabel, null));

        locatingButton.setText("Locate subsequence...");
        locatingButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                locatingButtonActionPerformed(evt);
            }
        });

        filterCheckBox.setText("Only allow R & Y in X position");

        copyrightLabel.setText("All rights reserved.");
        copyrightLabel.setToolTipText("It is only free for academic and non-commercial users.");

        combinationLabel.setText("Combination Length");

        combinationSpinner.setModel(new javax.swing.SpinnerNumberModel(Integer.valueOf(1), Integer.valueOf(1), null, Integer.valueOf(1)));

        javax.swing.GroupLayout finderPanelLayout = new javax.swing.GroupLayout(finderPanel);
        finderPanel.setLayout(finderPanelLayout);
        finderPanelLayout.setHorizontalGroup(
            finderPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(finderPanelLayout.createSequentialGroup()
                .addGroup(finderPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(finderPanelLayout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(finderPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(homepageLabel)
                            .addComponent(gangwuLabel)
                            .addComponent(kaichenLabel)
                            .addComponent(copyrightLabel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 4, Short.MAX_VALUE)
                        .addGroup(finderPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, finderPanelLayout.createSequentialGroup()
                                .addComponent(filterCheckBox)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(findButton))
                            .addComponent(locatingButton, javax.swing.GroupLayout.Alignment.TRAILING)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, finderPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(finderPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(positiveDirectoryLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(finderPanelLayout.createSequentialGroup()
                                .addComponent(patternFileLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGap(85, 85, 85))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, finderPanelLayout.createSequentialGroup()
                                .addGroup(finderPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(finderPanelLayout.createSequentialGroup()
                                        .addComponent(negativeDirectoryLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addGap(332, 332, 332))
                                    .addGroup(finderPanelLayout.createSequentialGroup()
                                        .addGroup(finderPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(positiveButton, javax.swing.GroupLayout.PREFERRED_SIZE, 174, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(negativeButton, javax.swing.GroupLayout.PREFERRED_SIZE, 174, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(patternButton, javax.swing.GroupLayout.PREFERRED_SIZE, 174, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addGroup(finderPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(combinationLabel, javax.swing.GroupLayout.Alignment.TRAILING))))
                                .addGap(18, 18, 18)
                                .addGroup(finderPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(positiveNoiseSpinner, javax.swing.GroupLayout.DEFAULT_SIZE, 37, Short.MAX_VALUE)
                                    .addComponent(negativeNoiseSpinner, javax.swing.GroupLayout.DEFAULT_SIZE, 37, Short.MAX_VALUE)
                                    .addComponent(combinationSpinner))))))
                .addContainerGap())
        );

        finderPanelLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {negativeButton, patternButton, positiveButton});

        finderPanelLayout.setVerticalGroup(
            finderPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(finderPanelLayout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addGroup(finderPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(positiveButton, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(positiveNoiseSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addGap(2, 2, 2)
                .addComponent(positiveDirectoryLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 18, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(finderPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(negativeButton, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(negativeNoiseSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addGap(2, 2, 2)
                .addGroup(finderPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(finderPanelLayout.createSequentialGroup()
                        .addComponent(negativeDirectoryLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(15, 15, 15)
                        .addGroup(finderPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(patternButton, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(combinationLabel)))
                    .addComponent(combinationSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(patternFileLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(finderPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(finderPanelLayout.createSequentialGroup()
                        .addGroup(finderPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(findButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(filterCheckBox))
                        .addGap(8, 8, 8)
                        .addComponent(locatingButton, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, finderPanelLayout.createSequentialGroup()
                        .addGroup(finderPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel3)
                            .addGroup(finderPanelLayout.createSequentialGroup()
                                .addComponent(homepageLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(gangwuLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(kaichenLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(copyrightLabel)))
                        .addGap(0, 10, Short.MAX_VALUE))))
        );

        finderPanelLayout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {findButton, negativeButton, patternButton, positiveButton});

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(finderPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(finderPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void positiveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_positiveButtonActionPerformed
        finderFileChooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY  );
        int ret = finderFileChooser.showOpenDialog(finderPanel);
        if (ret == JFileChooser.CANCEL_OPTION)
            return;
        positiveDirectory = finderFileChooser.getSelectedFile();
        if (positiveDirectory != null){
            positiveDirectoryLabel.setText(positiveDirectory.getAbsolutePath());
            positiveDirectoryLabel.setToolTipText(positiveDirectory.getAbsolutePath());
            try {
                positiveCount = finder.loadPositiveSequences(positiveDirectory);
            } catch (IOException ex) {
                Logger.getLogger(EnzymeFinderWindow.class.getName()).log(Level.SEVERE, null, ex);
                JOptionPane.showMessageDialog(this, "Failed to open positive sequences directory.");
            }
        }
    }//GEN-LAST:event_positiveButtonActionPerformed

    private void negativeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_negativeButtonActionPerformed
        finderFileChooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY  );
        int ret = finderFileChooser.showOpenDialog(finderPanel);
        if (ret == JFileChooser.CANCEL_OPTION)
            return;
        negativeDirectory = finderFileChooser.getSelectedFile();
        if (negativeDirectory != null){
            negativeDirectoryLabel.setText(negativeDirectory.getAbsolutePath());
            negativeDirectoryLabel.setToolTipText(negativeDirectory.getAbsolutePath());
            try {
                negativeCount = finder.loadNegativeSequences(negativeDirectory);
            } catch (IOException ex) {
                Logger.getLogger(EnzymeFinderWindow.class.getName()).log(Level.SEVERE, null, ex);
                JOptionPane.showMessageDialog(this, "Failed to open negative sequences directory.");
            }
        }
    }//GEN-LAST:event_negativeButtonActionPerformed

    private void patternButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_patternButtonActionPerformed
        finderFileChooser.setFileSelectionMode(JFileChooser.FILES_ONLY  );
        int ret = finderFileChooser.showOpenDialog(finderPanel);
        if (ret == JFileChooser.CANCEL_OPTION)
            return;
        patternFile = finderFileChooser.getSelectedFile();
        if (patternFile != null){
            patternFileLabel.setText(patternFile.getAbsolutePath());
            patternFileLabel.setToolTipText(patternFile.getAbsolutePath());
            try {
                finder.loadPatterns(patternFile);
            } catch (IOException ex) {
                Logger.getLogger(EnzymeFinderWindow.class.getName()).log(Level.SEVERE, null, ex);
                JOptionPane.showMessageDialog(this, "Failed to open pattern file.");
            } catch (EnzymeFinderException ex) {
                Logger.getLogger(EnzymeFinderWindow.class.getName()).log(Level.SEVERE, null, ex);
                JOptionPane.showMessageDialog(this, "Failed to read pattern file because " + ex.getMessage());
            }
        }
    }//GEN-LAST:event_patternButtonActionPerformed

    private void findButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_findButtonActionPerformed

        if (filterCheckBox.isSelected()){
            byte[] filter = {Base.BASE_R, Base.BASE_Y};
            PatternizedSubSequenceValue.setFilterBases(filter);
        }else
            PatternizedSubSequenceValue.setFilterBases(null);
        
//        try {
            if (positiveDirectory == null){
                JOptionPane.showMessageDialog(this, "No positive directory is selected!.");
                return;
            }
            if (negativeDirectory == null){
                JOptionPane.showMessageDialog(this, "No negative directory is selected!.");
                return;
            }
            if (patternFile == null){
                JOptionPane.showMessageDialog(this, "No pattern file is selected!.");
                return;
            }
            
//            finder = new EnzymeFinder();
//            int positiveCount = finder.loadPositiveSequences(positiveDirectory);
//            int negativeCount = finder.loadNegativeSequences(negativeDirectory);
//            finder.loadPatterns(patternFile);
            finder.setbStop(false);
            finder.setPositiveNoise(positiveCount - (Integer)positiveNoiseSpinner.getValue());
            finder.setNegativeNoise((Integer)negativeNoiseSpinner.getValue());
            finder.setCombination((Integer)combinationSpinner.getValue());
            findingThread = new FindingThread(finder, this);   // Create a working thread
            
            findingThread.start();   // Start the working thread
            findingDialog.setVisible(true);
//            File f = finder.outputFind();
//            if (f != null)
//                JOptionPane.showMessageDialog(this, "Please find the output results in " + f.getAbsolutePath());
//        } catch (IOException ex) {
//            Logger.getLogger(EnzymeFinderWindow.class.getName()).log(Level.SEVERE, null, ex);
//        } catch (EnzymeFinderException ex) {
//            Logger.getLogger(EnzymeFinderWindow.class.getName()).log(Level.SEVERE, null, ex);
//        }

    }//GEN-LAST:event_findButtonActionPerformed

    private void findingDialogWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_findingDialogWindowClosing
        if (finder.isbStop()){   // Directly close the dialog if the thread has been finished.
            findingDialog.setVisible(false);
            return;
        }
        
        int option = JOptionPane.showConfirmDialog(
                findingDialog, 
                "Do you want to stop finding?", 
                "Stop Finding?", 
                JOptionPane.YES_NO_OPTION, 
                JOptionPane.QUESTION_MESSAGE );
        if (option == JOptionPane.YES_OPTION){
            finder.setbStop(true);
            findingDialog.setVisible(false);
        }
        else
            findingDialog.setVisible(true);
    }//GEN-LAST:event_findingDialogWindowClosing

    private void cancelLocatingButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelLocatingButtonActionPerformed
        locatingDialog.setVisible(false);
    }//GEN-LAST:event_cancelLocatingButtonActionPerformed

    private void okLocatingButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_okLocatingButtonActionPerformed
        finder.setbStop(false);
        String strSequence = locatingTextField.getText();
        byte[] subSequence = null;
        if ((strSequence != null)&&!(strSequence.equals(""))){
            subSequence = new byte[strSequence.length()];
            for (int i = 0; i < strSequence.length(); i++)
                subSequence[i] = (byte)strSequence.charAt(i);
        }
        
//        if (finder != null){
            locatingThread = new LocatingThread(Base.toCodes(subSequence, true), finder, this);   // Create a working thread
            
            locatingThread.start();   // Start the working thread
            findingDialog.setVisible(true);
//        }else{
//            JOptionPane.showMessageDialog(locatingDialog, "Please find first!");
//            locatingDialog.setVisible(false);
//        }
    }//GEN-LAST:event_okLocatingButtonActionPerformed

    private void locatingButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_locatingButtonActionPerformed
        if (positiveDirectory == null) {
            JOptionPane.showMessageDialog(this, "No positive directory is selected!.");
            return;
        }
        if (negativeDirectory == null) {
            JOptionPane.showMessageDialog(this, "No negative directory is selected!.");
            return;
        }
        
        if (finder != null)
            finder.setbStop(false);
        locatingDialog.setVisible(true);
    }//GEN-LAST:event_locatingButtonActionPerformed

    private void logTextAreaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_logTextAreaMouseClicked
        
        if (evt.getClickCount() == 2){
            if (!locatingDialog.isVisible())
                return;
            try {
                DefaultHighlighter highlighter = (DefaultHighlighter) sequenceTextPane.getHighlighter();    // for original sequence
                DefaultHighlighter pairHighlighter = (DefaultHighlighter) pairTextPane.getHighlighter();    // for pair sequence
//                MyHighlightPainter painter = new MyHighlightPainter(new Color(226, 239, 255));  
                
                int line = logTextArea.getLineOfOffset(logTextArea.getCaretPosition());
                List<Sequence> locatingPositions = finder.getAllSequencesList();
                Sequence seq = locatingPositions.get(line);
                sequenceDialog.setTitle(seq.getId());
                sequenceTextPane.setText(seq.getOriginalSequenceInNames(false));    // for original sequence
                pairTextPane.setText(seq.getOriginalSequenceInNames(true));          // for pair sequence
                byte [] subSequence = seq.getLocatingSubSequence();

                // for original sequence
                for (Integer i : seq.getLocatingPositions()){
                    highlighter.addHighlight(i, i + subSequence.length, new DefaultHighlighter.DefaultHighlightPainter(new Color(255, 255, 0)));
//                    sequenceTextPane.getStyledDocument().setCharacterAttributes(i, , null, true);
                }
                
                // for pair sequence
                for (Integer i : seq.getPairLocatingPositions()){
                    pairHighlighter.addHighlight(i, i + subSequence.length, new DefaultHighlighter.DefaultHighlightPainter(new Color(255, 255, 0)));
//                    sequenceTextPane.getStyledDocument().setCharacterAttributes(i, , null, true);
                }

            } catch (BadLocationException ex) {
                Logger.getLogger(EnzymeFinderWindow.class.getName()).log(Level.SEVERE, null, ex);
            }
            sequenceDialog.setVisible(true);
        }
    }//GEN-LAST:event_logTextAreaMouseClicked

    public void clearLocatingDialog(){
        
    }
    
    public void clearFindingDialog(){
        findingProgressBar.setValue(0);
        logTextArea.setText(null);
        summaryTextArea.setText(null);
    }
    
    JProgressBar getFindingProgressBar(){
        return findingProgressBar;
    }
    
    JLabel getProgressLabel(){
        return progressLabel;
    }
    
    JDialog getFindingDialog(){
        return findingDialog;
    }
    
    JDialog getLocatingDialog(){
        return locatingDialog;
    }
    
    JTextArea getLogTextArea(){
        return logTextArea;
    }
    
    JTextArea getSummaryTextArea(){
        return summaryTextArea;
    }
    
    class MyHighlightPainter extends DefaultHighlighter.DefaultHighlightPainter {  
        public MyHighlightPainter(Color color) {  
            super(color);  
        }  
    }  

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /*
         * Set the Nimbus look and feel
         */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /*
         * If Nimbus (introduced in Java SE 6) is not available, stay with the
         * default look and feel. For details see
         * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(EnzymeFinderWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(EnzymeFinderWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(EnzymeFinderWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(EnzymeFinderWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /*
         * Create and display the form
         */
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new EnzymeFinderWindow().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextArea baseTextArea;
    private javax.swing.JButton cancelLocatingButton;
    private javax.swing.JLabel combinationLabel;
    private javax.swing.JSpinner combinationSpinner;
    private javax.swing.JLabel copyrightLabel;
    private javax.swing.Box.Filler filler1;
    private javax.swing.JCheckBox filterCheckBox;
    private javax.swing.JButton findButton;
    private javax.swing.JFileChooser finderFileChooser;
    private javax.swing.JPanel finderPanel;
    private javax.swing.JDialog findingDialog;
    private javax.swing.JProgressBar findingProgressBar;
    private javax.swing.JLabel gangwuLabel;
    private javax.swing.JLabel homepageLabel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel kaichenLabel;
    private javax.swing.JButton locatingButton;
    private javax.swing.JDialog locatingDialog;
    private javax.swing.JLabel locatingLabel;
    private javax.swing.JTextField locatingTextField;
    private javax.swing.JLabel logLabel;
    private javax.swing.JScrollPane logScrollPane;
    private javax.swing.JTextArea logTextArea;
    private javax.swing.JButton negativeButton;
    private javax.swing.JLabel negativeDirectoryLabel;
    private javax.swing.JSpinner negativeNoiseSpinner;
    private javax.swing.JButton okLocatingButton;
    private javax.swing.JScrollPane pairScrollPane;
    private javax.swing.JTextPane pairTextPane;
    private javax.swing.JButton patternButton;
    private javax.swing.JLabel patternFileLabel;
    private javax.swing.JButton positiveButton;
    private javax.swing.JLabel positiveDirectoryLabel;
    private javax.swing.JSpinner positiveNoiseSpinner;
    private javax.swing.JLabel progressLabel;
    private javax.swing.JDialog sequenceDialog;
    private javax.swing.JScrollPane sequenceScrollPane;
    private javax.swing.JSplitPane sequenceSplitPane;
    private javax.swing.JTextPane sequenceTextPane;
    private javax.swing.JLabel summaryLabel;
    private javax.swing.JTextArea summaryTextArea;
    // End of variables declaration//GEN-END:variables
}
